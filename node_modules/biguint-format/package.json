{
  "name": "biguint-format",
  "version": "0.2.0",
  "description": "An arbitrary length unsigned integer formatter library for Node.js",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/T-PWK/biguint-format.git"
  },
  "keywords": [
    "big",
    "bignum",
    "biguint",
    "uint",
    "integer",
    "hex",
    "hexadecimal",
    "octet",
    "decimal",
    "binary",
    "formatting"
  ],
  "author": {
    "name": "Tom Pawlak",
    "email": "tompwk@gmail.com",
    "url": "http://blog.tompawlak.org/"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://blog.tompawlak.org/p/mit.html"
    }
  ],
  "bugs": {
    "url": "https://github.com/T-PWK/biguint-format/issues"
  },
  "readme": "Big UInteger Formatter \r\n====\r\n[![Build Status](https://travis-ci.org/T-PWK/biguint-format.png?branch=master)](https://travis-ci.org/T-PWK/biguint-format)  [![NPM version](https://badge.fury.io/js/biguint-format.png)](http://badge.fury.io/js/biguint-format) [![Total views](https://sourcegraph.com/api/repos/github.com/T-PWK/biguint-format/counters/views.png)](https://sourcegraph.com/github.com/T-PWK/biguint-format) \r\n\r\nAn arbitrary length unsigned integer formatter library for Node.js.\r\n\r\nJavaScript uses [IEEE 754 double-precision floats](http://en.wikipedia.org/wiki/IEEE_floating_point) to represents numbers. That works perfectly fine for small numbers, however, it is an issue for big integers. This means they lose integer precision for values beyond `+/- 2 pow 53`\r\n\r\n### Problem ###\r\n\r\nPresentation of *small* integer in decimal format works fine (e.g. `0x1FF`). However, we can see an issue when we try to convert big integers like `0x1234567890abcdeffedcba908765421` to string decimal.\r\n\r\n```js\r\n(0x1FF).toString(10) // returns '511' - correct\r\n(0x1234567890abcdeffedcba908765421).toString(10) \r\n\r\n// output is '1.5123660750094533e+36' - incorrect - lose integer precision\r\n```\r\n\r\n### Solution ###\r\n\r\nNode.js `biguint-format` module has been built in order to help display very large (arbitrary lengh) unsigned integers without any integer precision lose.\r\n\r\nExample:\r\n```js\r\nvar biguint  = require('biguint-format');\r\n\r\n// 0x1234567890abcdeffedcba908765421 split into bytes\r\nbiguint.format([0x1, 0x23, 0x45, 0x67, 0x89, 0x0a, 0xbc, 0xde, 0xff, 0xed, 0xcb, 0xa9, 0x08, 0x76, 0x54, 0x21], 'dec')\r\n\r\n// output value is '1512366075009453296626403467035300897' - no integer precision lose\r\n```\r\n## Instalation ##\r\n```\r\n$ npm install biguint-format\r\n```\r\n\r\n## API ##\r\n\r\nThe `biguint-format` module is a function (`fn(number, format [, options])`) which performs number conversion to the required string format. \r\n\r\nThe `number` argument represents an arbitrary lenght unsigned integer number to be converted to string. It can be provided in one of the following formats:\r\n* Node.js [Buffer](http://nodejs.org/api/buffer.html) e.g. `new Buffer([0x1, 0xFF])`\r\n* An array of bytes (values from `0x00` to `0xFF`) e.g. `[0x1, 0xFF]`.\r\n* A string with a number in a hexadecimal format e.g. `0x1FF0A` or `1FF0A`\r\n\r\nThe `format` argument represents output string format and it can be one of the following options:\r\n* `dec` - convertion to decimal format e.g. `123324884`\r\n* `bin` - conversion to binary format e.g. `1100101010`\r\n* `hex` - conversion to hexadecimal format e.g. `0xADFFAA11`\r\n* `oct` - conversion to octet format e.g. `07771`\r\n\r\nThe `options` argument (optional) is an object which provides some additional conversion details:\r\n* `format` - specifies format of the input number. It can be either `BE` for Big Endian or `LE` for Little Endian. `BE` is a default value. Check [wikipedia](http://en.wikipedia.org/wiki/Endianness) for more details.\r\n* `prefix` - output string prefix. Note that this option is not supported by `dec` conversion.\r\n* `groupsize` - splits output string into groups of `groupsize` lenght characters.\r\n* `delimiter` - specifes delimiter string to be inserted in between character groups. Default value is space. It is quite handy option when dealing with large numbers.\r\n* `trim` - (works only with `bin` formatting) specifies if the leading 0's should be trimmed.\r\n* `padstr` - string used for right-padding of the fomratted string if its length (inlucing prefix and grouping) is less than value of `size` parameter.\r\n* `size` - determines formatted string size. That opiton has effect only with `padstr` option. Note that the formatted string is not trimmed if its length is longer than value of `size` parameter.\r\n\r\n### Examples ###\r\n\r\n```js\r\nvar format = require('biguint-format');\r\n\r\nvar buffer1 = new Buffer([0x63, 0xA7, 0x27]);\r\nvar buffer2 = new Buffer([0x27, 0xA7, 0x63]);\r\n\r\nformat(buffer1, 'dec', {format:'LE'})   // returns '2598755'\r\nformat(buffer2, 'dec', {format:'BE'})   // returns '2598755'\r\nformat(buffer2, 'dec')                  // returns '2598755'\r\n\r\nformat(buffer1, 'hex', {format:'LE'})   // returns '27a763'\r\nformat(buffer2, 'hex', {format:'BE'})   // returns '27a763'\r\nformat(buffer2, 'hex', {prefix:'0x'})   // returns '0x27a763'\r\n\r\nformat(buffer2, 'bin')                  // 001001111010011101100011\r\nformat(buffer2, 'bin', {groupsize:8})   // 00100111 10100111 01100011\r\nformat(buffer2, 'oct')                  // 11723543\r\nformat(buffer2, 'oct', {prefix:'0'})    // 011723543\r\n```\r\n\r\nUse of `delimiter` option which helps with large numbers e.g.\r\n```js\r\nvar format = require('biguint-format');\r\n\r\nformat([0x2A, 0xFF, 0x1E, 0x22, 0x11, 0x30, 0x12, 0x2F], 'bin')\r\nformat([0x2A, 0xFF, 0x1E, 0x22, 0x11, 0x30, 0x12, 0x2F], 'bin', {groupsize:8})\r\n\r\n// returned values\r\n0010101011111111000111100010001000010001001100000001001000101111        // no delimiter\r\n00101010 11111111 00011110 00100010 00010001 00110000 00010010 00101111 // with delimiter\r\n```\r\n\r\nExample of `trim` option which works only with binary formatter\r\n```js\r\nvar format = require('biguint-format');\r\nvar buffer = new Buffer([0x1, 0xA7, 0x63]);\r\n\r\nformat(buffer, 'bin');              // returns 000000011010011101100011\r\nformat(buffer, 'bin', {trim:true}); // returns 11010011101100011\r\n```\r\n\r\nExample of `padstr` and `size` options\r\n```js\r\nvar format = require('biguint-format');\r\nvar buffer = new Buffer([0x1, 0xA7, 0x63]);\r\n\r\nformat(buffer, 'dec'); // returns 108387\r\nformat(buffer, 'oct'); // returns 323543\r\nformat(buffer, 'hex'); // returns 1a763\r\n\r\nformat(buffer, 'dec', {padstr:'0', size:6});  // returns 108387 - no padding effect\r\nformat(buffer, 'oct', {padstr:'0', size:10}); // returns 0000323543\r\nformat(buffer, 'hex', {padstr:'0', size:6});  // returns 01a763\r\n```\r\n\r\n## Author ##\r\nWriten by Tom Pawlak - [Blog](http://blog.tompawlak.org)\r\n\r\n## License ##\r\n\r\nCopyright (c) 2014 Tom Pawlak\r\n\r\nMIT License : http://blog.tompawlak.org/p/mit.html\r\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/T-PWK/biguint-format",
  "_id": "biguint-format@0.2.0",
  "_shasum": "ed3400030a76f3032853db20f081d490f13c4202",
  "_from": "biguint-format@*",
  "_resolved": "https://registry.npmjs.org/biguint-format/-/biguint-format-0.2.0.tgz"
}
